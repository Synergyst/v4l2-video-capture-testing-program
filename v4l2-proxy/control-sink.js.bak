// control-sink.js
// TCP server that forwards JSON input lines to a uinput helper (uinput-agent.py)
//
// Usage:
//   npm install
//   node control-sink.js
//
// Ensure uinput-agent.py is next to this file and python3 + evdev is installed.
// Run as root or give access to /dev/uinput.

const net = require('net');
const { spawn } = require('child_process');
const path = require('path');

const PORT = parseInt(process.env.CONTROL_TCP_PORT || '1444', 10);

// Spawn the uinput helper and keep it running. It reads JSON lines on stdin.
function startUinputHelper() {
  const script = path.join(__dirname, 'uinput-agent.py');
  const child = spawn('python3', [script], {
    stdio: ['pipe', 'inherit', 'inherit']
  });

  child.on('exit', (code, sig) => {
    console.error(`uinput helper exited (code=${code}, sig=${sig}), restarting in 1s...`);
    setTimeout(() => { startUinputHelper(); }, 1000);
  });

  child.on('error', (err) => {
    console.error('Failed to start uinput helper:', err);
    setTimeout(() => { startUinputHelper(); }, 5000);
  });

  return child;
}

const helper = startUinputHelper();

// Helper write function with simple backpressure handling
function sendToHelper(line) {
  if (!helper || !helper.stdin) return;
  const ok = helper.stdin.write(line);
  if (!ok) {
    // if the pipe is busy, pause briefly and retry
    helper.stdin.once('drain', () => {});
  }
}

// TCP server: accept controller connection(s) and forward JSON lines to helper
const server = net.createServer((sock) => {
  console.log('Controller connected:', sock.remoteAddress, sock.remotePort);
  // send an initial info request to helper (optional)
  sendToHelper(JSON.stringify({type: 'ctl_probe'}) + '\n');

  let buf = '';
  sock.on('data', (chunk) => {
    buf += chunk.toString('utf8');
    let idx;
    while ((idx = buf.indexOf('\n')) >= 0) {
      const line = buf.slice(0, idx);
      buf = buf.slice(idx + 1);
      if (!line.trim()) continue;
      // forward the line to the uinput helper unchanged, ensure newline
      try {
        // Basic validation: ensure it's JSON (optional)
        JSON.parse(line);
        sendToHelper(line + '\n');
      } catch (e) {
        console.warn('Received invalid JSON line, ignoring:', line);
      }
    }
  });

  sock.on('close', () => console.log('Controller disconnected'));
  sock.on('error', (err) => console.error('Controller socket error:', err.message));
});

server.listen(PORT, () => console.log('Control sink listening on', PORT));
